[ { "title": "arch linux下的纯汇编使用", "url": "/posts/archlinux%E4%B8%8B%E7%9A%84%E7%BA%AF%E6%B1%87%E7%BC%96%E4%BD%BF%E7%94%A8/", "categories": "archlinux, nasm", "tags": "archlinux, nasm", "date": "2022-02-01 03:53:10 +0800", "snippet": "首先安装汇编器，我们使用nasm，arch linux使用如下命令即可安装sudo pacman -S nasm创建一个名为helloworld.asm的汇编源文件用于存储源代码，使用汇编器及链接器生成目标文件及可重定位文件vim helloworld.asmnasm -f elf -o helloworld.o helloworld.asmld -m elf_i386 -s -o helloworld helloworld.o./helloworld测试代码如下，该例程用于输出一个字符串至标准输出设备上segment .datamsg db &quot;Hello,world!&quot;,10len equ $-msg segment .textglobal _start _start: mov eax,4 mov ebx,1 mov ecx,msg mov edx,len int 80h mov eax,1 mov ebx,0 int 80h" }, { "title": "arch linux下的docker环境搭建", "url": "/posts/archlinux%E4%B8%8Bdocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/", "categories": "archlinux, docker", "tags": "archlinux, docker", "date": "2022-02-01 02:38:17 +0800", "snippet": "arch linux安装docker更为简单，运行如下命令即可# 安装dockersudo pacman -S docker# 将当前用户加入docker组sudo gpasswd -a ${USER} docker# 开机自启sudo systemctl enable docker.service sudo systemctl enable docker.socket# 启动dockersudo systemctl start docker.socket# 提权sudo chmod 777 /var/run/docker.sock " }, { "title": "ubuntu下的docker环境搭建", "url": "/posts/ubuntu%E4%B8%8Bdocker%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/", "categories": "ubuntu, docker", "tags": "ubuntu, docker", "date": "2022-02-01 02:07:25 +0800", "snippet": "现在安装docker已经非常简单了，可以使用官方安装脚本自动安装：curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun脚本自动安装虽然省事，但是在使用过程中反复出现权限问题，每次使用都需要赋予权限，很是麻烦，貌似手动安装在第一次赋予权限即可，所以推荐使用如下命令进行手动安装：# 更新apt包索引并安装包以允许apt通过 HTTPS 使用存储库：sudo apt-get updatesudo apt-get install apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common# 添加Docker官方的GPG密钥：curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -sudo apt-key fingerprint 0EBFCD88#使用以下指令设置稳定版仓库sudo add-apt-repository &quot;deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/ $(lsb_release -cs) stable&quot;#更新 apt 包索引。sudo apt-get update#安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：sudo apt-get install docker-ce docker-ce-cli containerd.io安装完成后，因为权限问题，还无法使用docker命令，使用下面命令赋予docker权限即可：sudo chmod a+rw /var/run/docker.sockdocker已经安装完成，可以使用了。" }, { "title": "arch linux下的bochs安装及bootloader测试", "url": "/posts/archlinux%E4%B8%8Bbochs%E5%AE%89%E8%A3%85%E5%8F%8Abootloader%E6%B5%8B%E8%AF%95/", "categories": "bochs, bootloader", "tags": "bochs, bootloader", "date": "2022-02-01 01:38:07 +0800", "snippet": "bochs，qemu等都可以做模拟机供我们开发操作系统，在使用时，我们需要调试程序，所以采用源码编译，目前最新的版本为2.7，可以从此下载。安装首先安装依赖(arch linux不需要安装依赖，直接编译就好)：sudo apt-get install build-essential xorg-dev bison libgtk2.0-dev g++其次将源码解压缩，打开调试支持tar -zxvf bochs-2.7.tar.gzcd bochs-2.7sudo ./configure --enable-debugger清除配置时生成的中间文件，并重新编译、安装# 如果不进行清除，则会编译失败，不是很清楚造成这个问题的原因；make cleanmakesudo make install测试我们自己写一个最简单的nasm汇编程序，制作为bootloader，使用bochs加载以达到测试目的。程序源码如下，原理为直接向显存（0xb800）写字符串，其中每字符占两个字节，显存写完后使用jmp指令将程序卡住；另外制作bootloader需要写满一个扇区，所以使用0x00填充，并以0x55aa结束。mov ax, 0xb800mov ds, axmov byte [0x00], &#39;H&#39;mov byte [0x02], &#39;e&#39;mov byte [0x04], &#39;l&#39;mov byte [0x06], &#39;l&#39;mov byte [0x08], &#39;o&#39;mov byte [0x0a], &#39;,&#39;mov byte [0x0c], &#39;O&#39;mov byte [0x0e], &#39;S&#39;mov byte [0x10], &#39;!&#39;jmp $times 510-($-$$) db 0 db 0x55,0xaa程序的编译、镜像的制作与bochs的执行都需要人工操作，可写成makefile以简化操作；在执行make build制作镜像之前，需要使用bximage(随bochs一起安装的)制造一个默认镜像，我们制造一个名为test.img，大小1.44MB的软盘：test.bin: test.asm nasm -o test.bin test.asm.PHONEY: buildbuild: dd if=test.bin of=test.img bs=512 count=1 conv=notrunc.PHONEY: runrun: bochs -f bochsrc我们可以使用make来编译源码，使用make build将test.bin写入test.img，使用make run来启动bochs。我们为bochs手动指明启动参数，在当前目录写如下配置文件：################################################################ Configuration file for Bochs################################################################ how much memory the emulated machine will havemegs: 32# filename of ROM imagesromimage: file=/usr/local/share/bochs/BIOS-bochs-latestvgaromimage: file=/usr/local/share/bochs/VGABIOS-lgpl-latest# what disk images will be usedfloppya: 1_44=test.img, status=inserted# choose the boot disk.boot: floppy# where do we send log messages?# log: bochsout.txt# disable the mousemouse: enabled=1# enable key mapping, using US layout as default.keyboard:keymap=/usr/local/share/bochs/keymaps/x11-pc-us.map" }, { "title": "ubuntu下交换control与caplock按键", "url": "/posts/ubuntu%E4%B8%8B%E4%BA%A4%E6%8D%A2ctrl%E4%B8%8Ecapslock/", "categories": "ubuntu, 键盘策略", "tags": "ubuntu, 键盘策略", "date": "2022-02-01 01:34:13 +0800", "snippet": "Ubuntu下可编辑/etc/default/keyboard文件sudo vim /etc/default/keyboard修改XKBOPTIONS一行进行交换XKBOPTIONS=&quot;ctrl:swapcpas&quot;重新生效键盘策略sudo dpkg-reconfigure keyboard-configuration" }, { "title": "arch linux下安装jekyll", "url": "/posts/archlinux%E4%B8%8B%E5%AE%89%E8%A3%85jekyll/", "categories": "archlinux, jekyll", "tags": "archlinux, jekyll", "date": "2022-01-31 19:32:00 +0800", "snippet": "AUR已经有了jekyll，可以直接安装，但是本文还是依旧从rubygems开始首先使用如下命令安装rubygemssudo pacman -S rubygems安装jekyll前需要更新gem组件，使用如下命令即可gem updategem组件更新完成后，就可以使用如下命令安装jekyll及bundlergem install jekyll bundlerbundle update在gem安装时可能出现undefined method &#39;size&#39; for nil:NilClass(NoMethodError)问题，可以参考如下方案在.bashrc文件内加入如下两个变量export GEM_HOME=&quot;$(ruby -e &#39;puts Gem.user_dir&#39;)&quot;export PATH=&quot;$PATH:$GEM_HOME/bin&quot;然后使用如下命令查看gem环境gem env得到gem的PATH路径，比如- GEM PATHS: - /home/wbx/.local/share/gem/ruby/3.0.0 - /usr/lib/ruby/gems/3.0.0将这两个目录下的cache目录删除，再次执行gem安装及更新时就不会出错了" }, { "title": "arch linux下交换control与capslock", "url": "/posts/archlinux%E4%B8%8B%E4%BA%A4%E6%8D%A2ctrl%E4%B8%8Ecapslock/", "categories": "archlinux, 键盘策略", "tags": "archlinux, 键盘策略", "date": "2022-01-17 00:05:04 +0800", "snippet": "通用的linux系统做法需要用到xmodmap工具，具体操作如下：编辑一个Xmodmap文件用于存储xmodmap脚本vim ~/.Xmodmap脚本内容如下：remove Lock = Caps_Lockremove Control = Control_Lkeysym Control_L = Caps_Lockkeysym Caps_Lock = Control_Ladd Lock = Caps_Lockadd Control = Control_L如果只是想单次验证，运行如下命令即可xmodmap ~/.Xmodmap添加至bashrc里，则在开启终端时自动生效if [ -f ~/.Xmodmap ]; then xmodmap ~/.Xmodmap; fi由于我们使用i3-wm，所以直接在~/.config/i3/config中配置即可:exec_always ~/.Xmodmap" } ]
